// This file is auto-generated by scripts/generate-manifest.js
// Do not modify this file directly.


export interface WizardEntry {
  name: string;
  description: string;
  tags: string[];
  category: string;
  filePath: string;
  props?: {
    name: string;
    type: string;
    description: string;
    default?: string;
  }[];
  availableData?: string[]; // Specific for mock data
  returns?: { // Now supports parsing @returns for hooks
    name: string;
    type: string;
    description: string;
  }[];
}

export interface WizardManifest {
  components: WizardEntry[];
  layouts: WizardEntry[];
  utils: WizardEntry[]; // For providers, etc.
  hooks: WizardEntry[]; // For custom hooks like useDataFetch, useTheme
  data: WizardEntry[];
}

export const wizardManifest: WizardManifest = {
  "components": [
    {
      "name": "BarChart",
      "description": "A theme-aware bar chart component powered by Recharts, for comparing categorical data.",
      "tags": [
        "charts",
        "data-visualization",
        "rechart"
      ],
      "category": "charts",
      "props": [
        {
          "name": "data",
          "type": "any[]",
          "description": "The dataset for the chart. Each object in the array represents a category."
        },
        {
          "name": "dataKeyX",
          "type": "string",
          "description": "The key from your data objects to be used for the X-axis (e.g., 'name', 'category')."
        },
        {
          "name": "barKeys",
          "type": "{ key: string; color: string }[]",
          "description": "An array of objects, each specifying a data key for a bar series and its color (e.g., `[{ key: 'pv', color: '#8884d8' }]`)."
        },
        {
          "name": "title",
          "type": "string",
          "description": "An optional title to display above the chart."
        }
      ],
      "filePath": "components/charts/BarChart.tsx"
    },
    {
      "name": "ChartWithTable",
      "description": "A wrapper component that combines a chart with an option to view its underlying data in a table within a drawer.",
      "tags": [
        "templates",
        "charts",
        "data-display",
        "pattern",
        "dashboard"
      ],
      "category": "templates-patterns",
      "props": [
        {
          "name": "title",
          "type": "string",
          "description": "The main title for the chart and the associated data view."
        },
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "The chart component itself (e.g., `<BarChart />` or `<LineChart />`)."
        },
        {
          "name": "data",
          "type": "any[]",
          "description": "The raw data used by the chart, which will also populate the table in the drawer."
        },
        {
          "name": "tableHeaders",
          "type": "TableHeader[]",
          "description": "The header configuration for the data table displayed in the drawer."
        }
      ],
      "filePath": "components/charts/ChartWithTable.tsx"
    },
    {
      "name": "LineChart",
      "description": "A theme-aware line chart component powered by Recharts, for visualizing trends over time or categories.",
      "tags": [
        "charts",
        "data-visualization",
        "rechart"
      ],
      "category": "charts",
      "props": [
        {
          "name": "data",
          "type": "any[]",
          "description": "The dataset for the chart. Each object in the array represents a point on the chart."
        },
        {
          "name": "dataKeyX",
          "type": "string",
          "description": "The key from your data objects to be used for the X-axis (e.g., 'month', 'category')."
        },
        {
          "name": "lineKeys",
          "type": "{ key: string; color: string }[]",
          "description": "An array of objects, each specifying a data key for a line and its color (e.g., `[{ key: 'sales', color: '#8884d8' }]`)."
        },
        {
          "name": "title",
          "type": "string",
          "description": "An optional title to display above the chart."
        }
      ],
      "filePath": "components/charts/LineChart.tsx"
    },
    {
      "name": "PieChart",
      "description": "A theme-aware pie chart component powered by Recharts, for showing proportional relationships of parts to a whole.",
      "tags": [
        "charts",
        "data-visualization",
        "rechart"
      ],
      "category": "charts",
      "props": [
        {
          "name": "data",
          "type": "any[]",
          "description": "The dataset for the chart. Each object in the array represents a slice of the pie."
        },
        {
          "name": "dataKey",
          "type": "string",
          "description": "The key from the data objects that specifies the numerical value of each slice."
        },
        {
          "name": "nameKey",
          "type": "string",
          "description": "The key from the data objects that specifies the name or label of each slice."
        },
        {
          "name": "title",
          "type": "string",
          "description": "An optional title to display above the chart."
        }
      ],
      "filePath": "components/charts/PieChart.tsx"
    },
    {
      "name": "DataTable",
      "description": "A powerful data grid component that wraps AG Grid, providing advanced features like sorting, filtering, and resizing, fully themed to match the application.",
      "tags": [
        "data-display",
        "grid",
        "table",
        "ag-grid",
        "advanced"
      ],
      "category": "data-display",
      "props": [
        {
          "name": "rowData",
          "type": "any[]",
          "description": "The data to display in the grid, an array of row objects."
        },
        {
          "name": "columnDefs",
          "type": "ColDef[]",
          "description": "An array defining the columns of the grid, using AG Grid's `ColDef` structure."
        },
        {
          "name": "height",
          "type": "string",
          "description": "The height of the data table container (e.g., '500px', '100%').",
          "default": "'500px'"
        },
        {
          "name": "defaultColDef",
          "type": "ColDef",
          "description": "Default column definitions applied to all columns unless overridden."
        },
        {
          "name": "gridOptions",
          "type": "GridOptions",
          "description": "Additional AG Grid options to configure the grid's behavior."
        }
      ],
      "filePath": "components/data/DataTable.tsx"
    },
    {
      "name": "Table",
      "description": "A simple, theme-aware HTML table component for displaying tabular data, with support for custom cell rendering and empty states.",
      "tags": [
        "data-display",
        "table",
        "ui"
      ],
      "category": "data-display",
      "props": [
        {
          "name": "headers",
          "type": "{ key: string; label: string; render?: (value: any, row: Record<string, any>) => React.ReactNode; }[]",
          "description": "An array defining the table columns, including a `key`, `label`, and optional `render` function for custom cell content."
        },
        {
          "name": "data",
          "type": "Record<string, any>[]",
          "description": "An array of objects, where each object represents a row of data for the table."
        },
        {
          "name": "caption",
          "type": "string",
          "description": "An optional caption for the table, providing a title or summary."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling of the table container."
        }
      ],
      "filePath": "components/data/Table.tsx"
    },
    {
      "name": "FileUpload",
      "description": "A component allowing users to upload files via drag-and-drop or a file browser, with support for multiple files and accepted types.",
      "tags": [
        "form",
        "input",
        "upload",
        "files",
        "ui"
      ],
      "category": "form",
      "props": [
        {
          "name": "onFileUpload",
          "type": "(files: File[]) => void",
          "description": "Callback function triggered when files are selected or dropped, providing an array of File objects."
        },
        {
          "name": "multiple",
          "type": "boolean",
          "description": "If true, allows the user to select and upload multiple files.",
          "default": "false"
        },
        {
          "name": "acceptedFileTypes",
          "type": "string",
          "description": "A string specifying acceptable file types (e.g., \".pdf,.txt,.xml\", \"image/*\")."
        },
        {
          "name": "label",
          "type": "string",
          "description": "An optional label displayed above the file upload area."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling of the file upload container."
        }
      ],
      "filePath": "components/forms/FileUpload.tsx"
    },
    {
      "name": "FormTemplate",
      "description": "A flexible component for rapidly building forms based on a declarative array of field configurations.",
      "tags": [
        "templates",
        "form",
        "structure",
        "pattern"
      ],
      "category": "templates-patterns",
      "props": [
        {
          "name": "title",
          "type": "string",
          "description": "The main title displayed at the top of the form."
        },
        {
          "name": "fields",
          "type": "FormField[]",
          "description": "An array of objects, where each object defines a form input, select, checkbox, or radio field."
        },
        {
          "name": "onSubmit",
          "type": "(formData: Record<string, any>) => void",
          "description": "Callback function triggered when the form is submitted, providing the current form data."
        },
        {
          "name": "onCancel",
          "type": "() => void",
          "description": "Optional callback function triggered when the 'Cancel' button is clicked."
        },
        {
          "name": "submitButtonText",
          "type": "string",
          "description": "The text displayed on the primary submit button.",
          "default": "'Submit'"
        },
        {
          "name": "cancelButtonText",
          "type": "string",
          "description": "The text displayed on the cancel button.",
          "default": "'Cancel'"
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for the outer form container."
        }
      ],
      "filePath": "components/forms/FormTemplate.tsx"
    },
    {
      "name": "ActionBar",
      "description": "A persistent bar, typically at the bottom of a form or page, used to group primary actions like 'Save' and 'Cancel'.",
      "tags": [
        "layout",
        "form",
        "actions",
        "buttons",
        "ui"
      ],
      "category": "layout",
      "props": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "The content of the action bar, typically `Button` components."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling of the action bar container."
        }
      ],
      "filePath": "components/templates/ActionBar.tsx"
    },
    {
      "name": "PageHeader",
      "description": "Displays the main header section of a page, including a title, optional description, and a slot for action buttons.",
      "tags": [
        "layout",
        "typography",
        "header",
        "ui",
        "template"
      ],
      "category": "layout",
      "props": [
        {
          "name": "title",
          "type": "string",
          "description": "The main title of the page."
        },
        {
          "name": "description",
          "type": "string",
          "description": "A brief descriptive subtitle displayed below the main title."
        },
        {
          "name": "actions",
          "type": "React.ReactNode",
          "description": "A slot for action buttons or other controls, typically aligned to the right of the header."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling of the page header container."
        }
      ],
      "filePath": "components/templates/PageHeader.tsx"
    },
    {
      "name": "SectionHeader",
      "description": "A simple, consistent header for organizing sections of content within a page.",
      "tags": [
        "layout",
        "typography",
        "header",
        "ui"
      ],
      "category": "layout",
      "props": [
        {
          "name": "title",
          "type": "string",
          "description": "The main title for the content section."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling of the header container."
        }
      ],
      "filePath": "components/templates/SectionHeader.tsx"
    },
    {
      "name": "SideNav",
      "description": "A sticky side navigation component, ideal for documentation sites or complex applications, with support for nested links and scroll-spy.",
      "tags": [
        "navigation",
        "layout",
        "ui",
        "menu"
      ],
      "category": "navigation",
      "props": [
        {
          "name": "navItems",
          "type": "NavItem[]",
          "description": "An array of navigation item objects, defining the structure of the side navigation menu."
        },
        {
          "name": "sectionIds",
          "type": "string[]",
          "description": "An array of HTML element IDs that the scroll-spy should observe to highlight active navigation items."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling of the side navigation container."
        }
      ],
      "filePath": "components/templates/SideNav.tsx"
    },
    {
      "name": "AccordionItem",
      "description": "A single, collapsible section within an `Accordion` component, consisting of a header and a hidden content body.",
      "tags": [
        "layout",
        "ui",
        "collapsible",
        "expandable"
      ],
      "category": "layout",
      "props": [
        {
          "name": "id",
          "type": "string",
          "description": "A unique identifier for this accordion item. Essential for `singleOpen` behavior."
        },
        {
          "name": "header",
          "type": "React.ReactNode",
          "description": "The content displayed in the clickable header of the accordion item."
        },
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "The content that will be revealed or hidden when the accordion item is toggled."
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "description": "Controls the open/closed state for this specific item (when used in a controlled `Accordion`)."
        },
        {
          "name": "onToggle",
          "type": "(id: string, isOpen: boolean) => void",
          "description": "Callback triggered when the item is toggled, providing its `id` and new `isOpen` state."
        }
      ],
      "filePath": "components/ui/Accordion.tsx"
    },
    {
      "name": "ActivityFeed",
      "description": "Displays a chronological list of recent activities or changes, typically with a timeline indicator.",
      "tags": [
        "templates",
        "patterns",
        "feed",
        "timeline",
        "data-display"
      ],
      "category": "templates-patterns",
      "props": [],
      "filePath": "components/ui/ActivityFeed.tsx"
    },
    {
      "name": "Alert",
      "description": "Displays static, in-page messages to convey important information like success, warnings, or errors.",
      "tags": [
        "feedback",
        "message",
        "notification",
        "ui"
      ],
      "category": "feedback",
      "props": [
        {
          "name": "title",
          "type": "string",
          "description": "The main heading or concise summary of the alert message."
        },
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "Optional additional content or a longer description for the alert."
        },
        {
          "name": "variant",
          "type": "'info' | 'success' | 'warning' | 'danger'",
          "description": "Defines the color scheme, icon, and semantic meaning of the alert.",
          "default": "'info'"
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling of the alert container."
        }
      ],
      "filePath": "components/ui/Alert.tsx"
    },
    {
      "name": "Avatar",
      "description": "Displays a user's profile picture or initials as a fallback, with different size options.",
      "tags": [
        "ui",
        "profile",
        "user"
      ],
      "category": "ui",
      "props": [
        {
          "name": "name",
          "type": "string",
          "description": "The name of the user, used for generating initials if no `src` is provided."
        },
        {
          "name": "src",
          "type": "string",
          "description": "The URL of the image to display as the avatar. If not provided, initials are shown."
        },
        {
          "name": "size",
          "type": "'sm' | 'md' | 'lg'",
          "description": "Controls the dimensions and font size of the avatar.",
          "default": "'md'"
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling."
        }
      ],
      "filePath": "components/ui/Avatar.tsx"
    },
    {
      "name": "Badge",
      "description": "A small, theme-aware component used for status indicators, labels, or counts.",
      "tags": [
        "ui",
        "status",
        "label",
        "indicator"
      ],
      "category": "ui",
      "props": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "The content to display inside the badge (e.g., text, number)."
        },
        {
          "name": "variant",
          "type": "'primary' | 'secondary' | 'success' | 'danger' | 'warning'",
          "description": "Defines the color scheme of the badge.",
          "default": "'primary'"
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling."
        }
      ],
      "filePath": "components/ui/Badge.tsx"
    },
    {
      "name": "BreadcrumbItem",
      "description": "Represents a single step or link within a `Breadcrumbs` navigation path.",
      "tags": [
        "navigation",
        "ui",
        "link"
      ],
      "category": "navigation",
      "props": [
        {
          "name": "label",
          "type": "React.ReactNode",
          "description": "The text or content displayed for this breadcrumb item."
        },
        {
          "name": "to",
          "type": "string",
          "description": "The URL path for this item to navigate to. If not provided, it's just text."
        },
        {
          "name": "isCurrent",
          "type": "boolean",
          "description": "If true, indicates this is the current page and will not be a clickable link."
        },
        {
          "name": "icon",
          "type": "React.ReactNode",
          "description": "An optional icon to display next to the breadcrumb label."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Additional CSS classes for custom styling of the individual item."
        }
      ],
      "filePath": "components/ui/Breadcrumbs.tsx"
    },
    {
      "name": "Button",
      "description": "A versatile component for user interactions, supporting various styles, sizes, and states.",
      "tags": [
        "ui",
        "action",
        "form",
        "clickable"
      ],
      "category": "ui",
      "props": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "The content displayed inside the button (e.g., text, icon)."
        },
        {
          "name": "variant",
          "type": "'primary' | 'secondary' | 'danger' | 'outline' | 'accent' | 'ghost' | 'link'",
          "description": "Defines the visual style and importance of the button.",
          "default": "'primary'"
        },
        {
          "name": "size",
          "type": "'sm' | 'md' | 'lg'",
          "description": "Controls the padding and font size of the button.",
          "default": "'md'"
        },
        {
          "name": "iconBefore",
          "type": "React.ReactNode",
          "description": "An optional icon to display before the button's text content."
        },
        {
          "name": "iconAfter",
          "type": "React.ReactNode",
          "description": "An optional icon to display after the button's text content."
        },
        {
          "name": "loading",
          "type": "boolean",
          "description": "If true, displays a loading spinner and disables the button.",
          "default": "false"
        },
        {
          "name": "fullWidth",
          "type": "boolean",
          "description": "If true, the button will take up the full width of its parent container.",
          "default": "false"
        },
        {
          "name": "className",
          "type": "string",
          "description": "Additional CSS classes for custom styling."
        },
        {
          "name": "onClick",
          "type": "() => void",
          "description": "Function to call when the button is clicked."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "If true, the button is unclickable and styled as disabled."
        }
      ],
      "filePath": "components/ui/Button.tsx"
    },
    {
      "name": "ButtonGroup",
      "description": "Groups multiple Button components visually and can function as a segmented control (radio group).",
      "tags": [
        "ui",
        "form",
        "action",
        "group"
      ],
      "category": "form",
      "props": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "The `Button` components to be grouped together."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes to apply to the container."
        },
        {
          "name": "value",
          "type": "string | number",
          "description": "For segmented controls, the value of the currently selected button."
        },
        {
          "name": "onValueChange",
          "type": "(value: string | number) => void",
          "description": "Callback function for segmented controls, called when the selected value changes."
        }
      ],
      "filePath": "components/ui/ButtonGroup.tsx"
    },
    {
      "name": "Card",
      "description": "A versatile container component with customizable background, border, padding, and shadow, adapting to the current theme.",
      "tags": [
        "layout",
        "ui",
        "container",
        "box"
      ],
      "category": "layout",
      "props": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "The content to be displayed inside the card."
        },
        {
          "name": "background",
          "type": "string",
          "description": "Custom Tailwind CSS class for the card's background (e.g., 'bg-blue-100'). Overrides default.",
          "default": "'bg-card'"
        },
        {
          "name": "border",
          "type": "string",
          "description": "Custom Tailwind CSS class for the card's border (e.g., 'border-2 border-red-500'). Overrides default.",
          "default": "'border border-border'"
        },
        {
          "name": "padding",
          "type": "string",
          "description": "Custom Tailwind CSS class for the card's padding (e.g., 'p-4', 'px-6 py-4')."
        },
        {
          "name": "shadow",
          "type": "string",
          "description": "Custom Tailwind CSS class for the card's box-shadow (e.g., 'shadow-md', 'shadow-lg')."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling of the card container."
        }
      ],
      "filePath": "components/ui/Card.tsx"
    },
    {
      "name": "Checkbox",
      "description": "A standard checkbox input for selecting one or more options from a set.",
      "tags": [
        "form",
        "input",
        "selection",
        "ui"
      ],
      "category": "form",
      "props": [
        {
          "name": "label",
          "type": "React.ReactNode",
          "description": "The visible label associated with the checkbox. Can be text or JSX."
        },
        {
          "name": "id",
          "type": "string",
          "description": "A unique HTML `id` for the input element. Automatically generated if not provided."
        },
        {
          "name": "checked",
          "type": "boolean",
          "description": "Controls whether the checkbox is currently checked."
        },
        {
          "name": "onChange",
          "type": "(event: React.ChangeEvent<HTMLInputElement>) => void",
          "description": "Callback function triggered when the checkbox's checked state changes."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "If true, the checkbox is unclickable and styled as disabled."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for the input element."
        }
      ],
      "filePath": "components/ui/Checkbox.tsx"
    },
    {
      "name": "ComboBox",
      "description": "A text input with an integrated dropdown list of selectable options, allowing both typing and selection.",
      "tags": [
        "form",
        "input",
        "select",
        "dropdown",
        "autocomplete",
        "ui"
      ],
      "category": "form",
      "props": [
        {
          "name": "options",
          "type": "{ value: string | number; label: string; }[]",
          "description": "An array of objects defining the selectable options, each with a `value` and `label`."
        },
        {
          "name": "label",
          "type": "string",
          "description": "An optional label displayed above the ComboBox input field."
        },
        {
          "name": "value",
          "type": "string | number | null",
          "description": "The currently selected option's `value`. Can be `null` if no option is selected."
        },
        {
          "name": "onSelect",
          "type": "(selectedValue: string | number | null, selectedLabel: string | null) => void",
          "description": "Callback function triggered when an option is selected from the dropdown."
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "The placeholder text displayed when the input is empty."
        },
        {
          "name": "id",
          "type": "string",
          "description": "A unique HTML `id` for the input element. Automatically generated if not provided."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for the ComboBox container."
        },
        {
          "name": "name",
          "type": "string",
          "description": "The `name` attribute for the underlying input element."
        }
      ],
      "filePath": "components/ui/ComboBox.tsx"
    },
    {
      "name": "DatePicker",
      "description": "A calendar-based input component for selecting single dates, with theme integration.",
      "tags": [
        "form",
        "input",
        "date",
        "calendar",
        "ui"
      ],
      "category": "form",
      "props": [
        {
          "name": "label",
          "type": "string",
          "description": "An optional label displayed above the date picker input field."
        },
        {
          "name": "selected",
          "type": "Date | null",
          "description": "The currently selected date object, or `null` if no date is selected."
        },
        {
          "name": "onChange",
          "type": "(date: Date | null) => void",
          "description": "Callback function triggered when a new date is selected."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for the date picker's wrapper container."
        },
        {
          "name": "dateFormat",
          "type": "string",
          "description": "The format string for displaying the date (e.g., 'MM/dd/yyyy', 'yyyy-MM-dd')."
        },
        {
          "name": "showTimeSelect",
          "type": "boolean",
          "description": "If true, also allows time selection in addition to date selection."
        },
        {
          "name": "isClearable",
          "type": "boolean",
          "description": "If true, displays a clear button to deselect the date."
        },
        {
          "name": "placeholderText",
          "type": "string",
          "description": "Text displayed when no date is selected."
        },
        {
          "name": "minDate",
          "type": "Date",
          "description": "The earliest selectable date."
        },
        {
          "name": "maxDate",
          "type": "Date",
          "description": "The latest selectable date."
        }
      ],
      "filePath": "components/ui/DatePicker.tsx"
    },
    {
      "name": "Drawer",
      "description": "A sliding panel that typically appears from the edge of the screen, used for additional content or forms.",
      "tags": [
        "layout",
        "modal",
        "slide-in",
        "ui"
      ],
      "category": "layout",
      "props": [
        {
          "name": "isOpen",
          "type": "boolean",
          "description": "Controls the visibility of the drawer."
        },
        {
          "name": "onClose",
          "type": "() => void",
          "description": "Callback function triggered when the drawer should close (e.g., on overlay click, escape key, or close button)."
        },
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "The content to be displayed inside the drawer."
        },
        {
          "name": "position",
          "type": "'left' | 'right' | 'top' | 'bottom'",
          "description": "The edge of the screen from which the drawer will slide in.",
          "default": "'right'"
        },
        {
          "name": "size",
          "type": "string",
          "description": "The width (for left/right) or height (for top/bottom) of the drawer (e.g., '50%', '400px').",
          "default": "'320px'"
        },
        {
          "name": "title",
          "type": "string",
          "description": "An optional title displayed in the drawer's header."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Additional CSS classes for custom styling of the drawer's content panel."
        },
        {
          "name": "overlayDismiss",
          "type": "boolean",
          "description": "If true, clicking outside the drawer (on the overlay) will close it.",
          "default": "true"
        }
      ],
      "filePath": "components/ui/Drawer.tsx"
    },
    {
      "name": "EmptyState",
      "description": "A component for displaying a message when there is no data or content to show.",
      "tags": [
        "ui",
        "feedback",
        "empty",
        "placeholder"
      ],
      "category": "feedback",
      "props": [
        {
          "name": "icon",
          "type": "React.ComponentProps<typeof Icon>['name']",
          "description": "The name of a Lucide icon to visually represent the empty state."
        },
        {
          "name": "title",
          "type": "string",
          "description": "The main heading or title for the empty state message."
        },
        {
          "name": "description",
          "type": "string",
          "description": "A longer, descriptive text explaining the empty state or next steps."
        },
        {
          "name": "actionButton",
          "type": "React.ReactNode",
          "description": "An optional React node, typically a Button, to provide a primary action."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Additional CSS classes for custom styling of the container."
        }
      ],
      "filePath": "components/ui/EmptyState.tsx"
    },
    {
      "name": "Icon",
      "description": "A dynamic component that renders scalable vector icons from the Lucide library.",
      "tags": [
        "ui",
        "graphics",
        "svg",
        "symbol"
      ],
      "category": "ui",
      "props": [
        {
          "name": "name",
          "type": "keyof typeof dynamicIconImports",
          "description": "The specific name of the Lucide icon to display (e.g., 'user', 'settings', 'check')."
        },
        {
          "name": "size",
          "type": "number | string",
          "description": "The width and height of the icon in pixels or CSS units.",
          "default": "24 (implicit from Lucide default)"
        },
        {
          "name": "color",
          "type": "string",
          "description": "The color of the icon."
        },
        {
          "name": "strokeWidth",
          "type": "number | string",
          "description": "The width of the icon's stroke.",
          "default": "2 (implicit from Lucide default)"
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for styling the SVG element."
        }
      ],
      "filePath": "components/ui/Icon.tsx"
    },
    {
      "name": "Input",
      "description": "A versatile text input field with support for labels, helper text, error states, and required indicators.",
      "tags": [
        "form",
        "ui",
        "text-input"
      ],
      "category": "form",
      "props": [
        {
          "name": "type",
          "type": "React.InputHTMLAttributes<HTMLInputElement>['type']",
          "description": "The HTML input type (e.g., 'text', 'email', 'password', 'number').",
          "default": "'text' (implicit from HTML default)"
        },
        {
          "name": "label",
          "type": "string",
          "description": "An optional label displayed above the input field."
        },
        {
          "name": "helperText",
          "type": "string",
          "description": "A short message displayed below the input, often for hints or errors."
        },
        {
          "name": "error",
          "type": "boolean",
          "description": "If true, the input will be styled to indicate an invalid or error state.",
          "default": "false"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "If true, displays a required indicator (*) next to the label and enforces HTML5 validation.",
          "default": "false"
        },
        {
          "name": "showOptionalLabel",
          "type": "boolean",
          "description": "If true, displays an \"(optional)\" indicator next to the label when not required.",
          "default": "false"
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling of the input element itself."
        },
        {
          "name": "containerClassName",
          "type": "string",
          "description": "Optional additional CSS classes for the wrapper div around the label, input, and helper text."
        },
        {
          "name": "id",
          "type": "string",
          "description": "A unique ID for the input, useful for associating labels."
        },
        {
          "name": "name",
          "type": "string",
          "description": "The `name` attribute of the input, used for form submission."
        },
        {
          "name": "value",
          "type": "string | number | readonly string[]",
          "description": "The current value of the input field."
        },
        {
          "name": "onChange",
          "type": "(event: React.ChangeEvent<HTMLInputElement>) => void",
          "description": "Callback function triggered when the input's value changes."
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "The placeholder text displayed when the input is empty."
        }
      ],
      "filePath": "components/ui/Input.tsx"
    },
    {
      "name": "ListItem",
      "description": "Represents a single item within a `List` component.",
      "tags": [
        "ui",
        "layout",
        "typography"
      ],
      "category": "layout",
      "props": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "The content of the list item."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for the list item (`<li>`)."
        }
      ],
      "filePath": "components/ui/List.tsx"
    },
    {
      "name": "MenuDivider",
      "description": "A visual separator for grouping MenuItems within a Menu.",
      "tags": [
        "menu",
        "navigation",
        "ui"
      ],
      "category": "navigation",
      "props": [],
      "filePath": "components/ui/Menu.tsx"
    },
    {
      "name": "Modal",
      "description": "A dialog box that appears on top of the current page, requiring user interaction to dismiss.",
      "tags": [
        "ui",
        "overlay",
        "dialog",
        "popup"
      ],
      "category": "layout",
      "props": [
        {
          "name": "isOpen",
          "type": "boolean",
          "description": "Controls the visibility of the modal."
        },
        {
          "name": "onClose",
          "type": "() => void",
          "description": "Callback function triggered when the modal should close (e.g., on escape key press or close button click)."
        },
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "The main content to be displayed inside the modal's body."
        },
        {
          "name": "title",
          "type": "string",
          "description": "An optional title displayed in the modal's header."
        },
        {
          "name": "footer",
          "type": "React.ReactNode",
          "description": "Optional content to be displayed in the modal's footer, typically action buttons."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling of the modal's content panel."
        }
      ],
      "filePath": "components/ui/Modal.tsx"
    },
    {
      "name": "MultiSelect",
      "description": "An enhanced dropdown component that allows users to select multiple options from a searchable list.",
      "tags": [
        "form",
        "input",
        "select",
        "dropdown",
        "ui",
        "multi-selection"
      ],
      "category": "form",
      "props": [
        {
          "name": "options",
          "type": "{ value: string; label: string; }[]",
          "description": "An array of objects defining the selectable options, each with a `value` and `label`."
        },
        {
          "name": "value",
          "type": "{ value: string; label: string; }[] | null",
          "description": "The currently selected options as an array of objects, or `null` if nothing is selected."
        },
        {
          "name": "onChange",
          "type": "(selected: MultiSelectOption[] | null) => void",
          "description": "Callback function triggered when the selection changes."
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "The placeholder text displayed when no options are selected.",
          "default": "'Select...'"
        },
        {
          "name": "isClearable",
          "type": "boolean",
          "description": "If true, allows the user to clear all selected options with a single click.",
          "default": "true"
        },
        {
          "name": "isDisabled",
          "type": "boolean",
          "description": "If true, the multi-select component will be unclickable and styled as disabled.",
          "default": "false"
        },
        {
          "name": "isLoading",
          "type": "boolean",
          "description": "If true, displays a loading indicator within the component.",
          "default": "false"
        },
        {
          "name": "isSearchable",
          "type": "boolean",
          "description": "If true, allows users to type into the input field to filter options.",
          "default": "true"
        },
        {
          "name": "label",
          "type": "string",
          "description": "An optional label displayed above the MultiSelect component."
        }
      ],
      "filePath": "components/ui/MultiSelect.tsx"
    },
    {
      "name": "Pagination",
      "description": "A navigation control for moving between pages of content, providing 'Previous', 'Next', and direct page number access.",
      "tags": [
        "navigation",
        "ui",
        "data-display"
      ],
      "category": "navigation",
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "description": "The currently active page number (1-based index)."
        },
        {
          "name": "totalPages",
          "type": "number",
          "description": "The total number of pages available for navigation."
        },
        {
          "name": "onPageChange",
          "type": "(page: number) => void",
          "description": "Callback function invoked when the user selects a new page number."
        },
        {
          "name": "maxPageButtons",
          "type": "number",
          "description": "The maximum number of visible page number buttons to display (excluding '...' and first/last page).",
          "default": "5"
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for the pagination container."
        }
      ],
      "filePath": "components/ui/Pagination.tsx"
    },
    {
      "name": "Radio",
      "description": "A single radio button input, typically used within a group where only one option can be selected.",
      "tags": [
        "form",
        "input",
        "selection",
        "ui"
      ],
      "category": "form",
      "props": [
        {
          "name": "label",
          "type": "React.ReactNode",
          "description": "The visible label associated with the radio button. Can be text or JSX."
        },
        {
          "name": "id",
          "type": "string",
          "description": "A unique HTML `id` for the input element. Automatically generated if not provided."
        },
        {
          "name": "name",
          "type": "string",
          "description": "The HTML `name` attribute, crucial for grouping radio buttons so only one can be selected."
        },
        {
          "name": "value",
          "type": "string | number | readonly string[]",
          "description": "The value associated with this radio button when it is selected."
        },
        {
          "name": "checked",
          "type": "boolean",
          "description": "Controls whether the radio button is currently selected."
        },
        {
          "name": "onChange",
          "type": "(event: React.ChangeEvent<HTMLInputElement>) => void",
          "description": "Callback function triggered when the radio button's checked state changes."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "If true, the radio button is unclickable and styled as disabled."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for the input element."
        }
      ],
      "filePath": "components/ui/Radio.tsx"
    },
    {
      "name": "SearchInput",
      "description": "A specialized input component designed for search functionality, featuring an integrated search icon.",
      "tags": [
        "form",
        "input",
        "search",
        "ui"
      ],
      "category": "form",
      "props": [
        {
          "name": "placeholder",
          "type": "string",
          "description": "The placeholder text displayed when the input is empty."
        },
        {
          "name": "value",
          "type": "string",
          "description": "The current value of the input field."
        },
        {
          "name": "onChange",
          "type": "(event: React.ChangeEvent<HTMLInputElement>) => void",
          "description": "Callback function triggered when the input value changes."
        },
        {
          "name": "containerClassName",
          "type": "string",
          "description": "Optional additional CSS classes for the outer container wrapping the input and icon."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for the input field itself."
        }
      ],
      "filePath": "components/ui/SearchInput.tsx"
    },
    {
      "name": "Select",
      "description": "A standard HTML select dropdown component for choosing a single option from a list.",
      "tags": [
        "form",
        "input",
        "dropdown",
        "ui"
      ],
      "category": "form",
      "props": [
        {
          "name": "options",
          "type": "{ value: string | number; label: string; }[]",
          "description": "An array of objects defining the selectable options, each with a `value` and `label`."
        },
        {
          "name": "label",
          "type": "string",
          "description": "An optional label displayed above the select dropdown."
        },
        {
          "name": "id",
          "type": "string",
          "description": "A unique HTML `id` for the select element. Automatically generated if not provided."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for the select element."
        },
        {
          "name": "value",
          "type": "string | number | readonly string[]",
          "description": "The currently selected option's value."
        },
        {
          "name": "onChange",
          "type": "(event: React.ChangeEvent<HTMLSelectElement>) => void",
          "description": "Callback function triggered when the selected value changes."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "If true, the select dropdown will be unclickable."
        }
      ],
      "filePath": "components/ui/Select.tsx"
    },
    {
      "name": "StatCard",
      "description": "A specialized card for prominently displaying a key statistic or metric, including an icon and optional trend indicator.",
      "tags": [
        "templates",
        "data-display",
        "metrics",
        "dashboard",
        "ui"
      ],
      "category": "templates-patterns",
      "props": [
        {
          "name": "title",
          "type": "string",
          "description": "The label or title for the displayed metric (e.g., 'Total Sales', 'New Users')."
        },
        {
          "name": "value",
          "type": "string",
          "description": "The main numerical or formatted value of the statistic."
        },
        {
          "name": "icon",
          "type": "React.ComponentProps<typeof Icon>['name']",
          "description": "The name of a Lucide icon to visually represent the metric."
        },
        {
          "name": "changeText",
          "type": "string",
          "description": "Text describing the change in the metric (e.g., '10% since last month')."
        },
        {
          "name": "changeDirection",
          "type": "'positive' | 'negative'",
          "description": "The direction of change, which determines the color of the associated badge."
        },
        {
          "name": "footerText",
          "type": "string",
          "description": "Optional additional text displayed at the bottom of the card, often for context."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling of the card container."
        }
      ],
      "filePath": "components/ui/StatCard.tsx"
    },
    {
      "name": "Stepper",
      "description": "Guides users through a sequence of discrete steps, ideal for multi-step forms or onboarding flows.",
      "tags": [
        "navigation",
        "progress",
        "wizard",
        "ui"
      ],
      "category": "navigation",
      "props": [
        {
          "name": "steps",
          "type": "{ label: string; summary?: string; }[]",
          "description": "An array of step objects, each with a `label` and optional `summary`."
        },
        {
          "name": "currentStep",
          "type": "number",
          "description": "The 0-based index of the currently active step."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for the stepper container."
        }
      ],
      "filePath": "components/ui/Stepper.tsx"
    },
    {
      "name": "TabPanel",
      "description": "Represents a single tab and its associated content panel within a `Tabs` component.",
      "tags": [
        "navigation",
        "ui",
        "content"
      ],
      "category": "navigation",
      "props": [
        {
          "name": "id",
          "type": "string",
          "description": "A unique identifier for this tab panel, used to link it to its header."
        },
        {
          "name": "label",
          "type": "string",
          "description": "The text label displayed on the tab header."
        },
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "The content to be displayed when this tab is active."
        },
        {
          "name": "icon",
          "type": "React.ReactNode",
          "description": "An optional icon to display next to the tab label in the header."
        }
      ],
      "filePath": "components/ui/Tabs.tsx"
    },
    {
      "name": "TippyTooltip",
      "description": "A flexible and theme-aware tooltip component that displays additional information on hover.",
      "tags": [
        "ui",
        "feedback",
        "tooltip",
        "overlay"
      ],
      "category": "feedback",
      "props": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "The element that triggers the tooltip when hovered over (or clicked, etc.)."
        },
        {
          "name": "content",
          "type": "React.ReactNode",
          "description": "The content to be displayed inside the tooltip."
        },
        {
          "name": "placement",
          "type": "TippyProps['placement']",
          "description": "The position of the tooltip relative to its trigger element (e.g., 'top', 'bottom', 'left', 'right').",
          "default": "'top'"
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for custom styling of the tooltip content."
        }
      ],
      "filePath": "components/ui/TippyTooltip.tsx"
    },
    {
      "name": "Toast",
      "description": "A single, transient notification message that appears briefly to provide feedback.",
      "tags": [
        "feedback",
        "notification",
        "message",
        "ui"
      ],
      "category": "feedback",
      "props": [
        {
          "name": "id",
          "type": "string",
          "description": "A unique identifier for this specific toast instance."
        },
        {
          "name": "message",
          "type": "string",
          "description": "The main text content of the toast notification."
        },
        {
          "name": "type",
          "type": "'success' | 'error' | 'info' | 'warning'",
          "description": "Defines the visual style and semantic meaning of the toast.",
          "default": "'info'"
        },
        {
          "name": "duration",
          "type": "number",
          "description": "How long the toast should remain visible in milliseconds. Set to `0` for a sticky toast.",
          "default": "3000"
        },
        {
          "name": "onDismiss",
          "type": "(id: string) => void",
          "description": "Callback function triggered when the toast is dismissed (either automatically or by user)."
        }
      ],
      "filePath": "components/ui/Toast.tsx"
    },
    {
      "name": "useToast",
      "description": "A React hook to easily add and dismiss toast notifications anywhere within a `ToastProvider`.",
      "tags": [
        "hook",
        "feedback",
        "notification"
      ],
      "category": "feedback",
      "props": [],
      "filePath": "components/ui/ToastContainer.tsx"
    },
    {
      "name": "ToggleSwitch",
      "description": "A theme-aware toggle switch component, offering a boolean input alternative to a checkbox.",
      "tags": [
        "form",
        "ui",
        "toggle",
        "switch",
        "input"
      ],
      "category": "form",
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "description": "Controls whether the toggle is in the 'on' (checked) or 'off' (unchecked) state."
        },
        {
          "name": "onChange",
          "type": "(checked: boolean) => void",
          "description": "Callback function triggered when the toggle state changes."
        },
        {
          "name": "label",
          "type": "string",
          "description": "An accessible text label displayed next to the toggle switch."
        },
        {
          "name": "className",
          "type": "string",
          "description": "Optional additional CSS classes for the toggle switch container."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "If true, the toggle switch will be unclickable and styled as disabled.",
          "default": "false"
        }
      ],
      "filePath": "components/ui/ToggleSwitch.tsx"
    }
  ],
  "layouts": [],
  "utils": [
    {
      "name": "ThemeProvider",
      "description": "Provides the global theme context to the application, enabling dynamic theme switching and persistence.",
      "tags": [
        "context",
        "theme",
        "provider",
        "global",
        "utility"
      ],
      "category": "utility",
      "props": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "description": "The application's UI components that will consume the theme context."
        }
      ],
      "filePath": "contexts/ThemeContext.tsx"
    }
  ],
  "hooks": [
    {
      "name": "useDataFetch",
      "description": "A custom React hook for simulating asynchronous data fetching from mock sources, managing loading, error, and data states.",
      "tags": [
        "hook",
        "data",
        "utility",
        "fetch",
        "mock"
      ],
      "category": "utility",
      "props": [
        {
          "name": "initialData",
          "type": "T | null",
          "description": "The initial data state before fetching begins."
        },
        {
          "name": "mockDataSource",
          "type": "T",
          "description": "The mock data object or array to be \"fetched\" by this hook."
        },
        {
          "name": "data",
          "type": "T | null",
          "description": "The fetched data, or null if not yet loaded or an error occurred."
        },
        {
          "name": "loading",
          "type": "boolean",
          "description": "True if data is currently being fetched, false otherwise."
        },
        {
          "name": "error",
          "type": "string | null",
          "description": "An error message if the fetch failed, or null if successful."
        },
        {
          "name": "fetchData",
          "type": "(params?: any) => Promise<void>",
          "description": "A function to manually trigger a re-fetch of the data."
        }
      ],
      "returns": [
        {
          "name": "data",
          "type": "T | null",
          "description": "The fetched data, or null if not yet loaded or an error occurred."
        },
        {
          "name": "loading",
          "type": "boolean",
          "description": "True if data is currently being fetched, false otherwise."
        },
        {
          "name": "error",
          "type": "string | null",
          "description": "An error message if the fetch failed, or null if successful."
        },
        {
          "name": "fetchData",
          "type": "(params?: any) => Promise<void>",
          "description": "A function to manually trigger a re-fetch of the data."
        }
      ],
      "filePath": "hooks/useDataFetch.ts"
    }
  ],
  "data": [
    {
      "name": "Mock Data Sets",
      "description": "Pre-defined datasets for prototyping tables, charts, and other data-driven components.",
      "tags": [
        "data",
        "mock",
        "example"
      ],
      "category": "data",
      "availableData": [
        "mockTableData",
        "mockChartData",
        "mockPieChartData",
        "mockLargeTableData"
      ],
      "filePath": "data/mockData.ts"
    }
  ]
} as const;

